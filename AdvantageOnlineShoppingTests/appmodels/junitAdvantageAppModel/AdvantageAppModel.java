
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the LeanFT Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package junitAdvantageAppModel;

import javax.annotation.Generated;

import com.hp.lft.sdk.*;
import com.hp.lft.sdk.internal.*;
import com.hp.lft.sdk.web.*;

@Generated(value = { "This class is automatically generated by the LeanFT Application Model code generator - version \"14.00\"" })
public class AdvantageAppModel extends AppModelBase {		private AdvantageShoppingPage AdvantageShoppingPage;
	private AdvantageOnlineShoppingDemoSupportChatPage AdvantageOnlineShoppingDemoSupportChatPage;
	
	public AdvantageAppModel(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("AdvantageAppModel");
				AdvantageShoppingPage = new AdvantageShoppingPage(contextTestObject, this);
		AdvantageOnlineShoppingDemoSupportChatPage = new AdvantageOnlineShoppingDemoSupportChatPage(contextTestObject, this);
		rebuildDescriptions();
	}	

			public AdvantageShoppingPage AdvantageShoppingPage() { return AdvantageShoppingPage; }
		public AdvantageOnlineShoppingDemoSupportChatPage AdvantageOnlineShoppingDemoSupportChatPage() { return AdvantageOnlineShoppingDemoSupportChatPage; }

		public class AdvantageShoppingPage extends PageNodeBase
	{

		
			private SearchIconWebElement SearchIconWebElement;
	private SpeakersImgWebElement SpeakersImgWebElement;
	private TabletsImgWebElement TabletsImgWebElement;
	private LAPTOPSShopNowWebElement LAPTOPSShopNowWebElement;
	private MICEShopNowWebElement MICEShopNowWebElement;
	private HEADPHONESShopNowWebElement HEADPHONESShopNowWebElement;
	private OURPRODUCTSMainWebElement OURPRODUCTSMainWebElement;
	private SPECIALOFFERMainWebElement SPECIALOFFERMainWebElement;
	private POPULARITEMSMainWebElement POPULARITEMSMainWebElement;
	private CONTACTUSMainWebElement CONTACTUSMainWebElement;
	private SignOutMainIconWebElement SignOutMainIconWebElement;
	private SEEOFFERButton SEEOFFERButton;
	private EXPLORENOWButton EXPLORENOWButton;
	private SelectProductLineContactUsListBox SelectProductLineContactUsListBox;
	private WebEditEditFieldContactUsSubject WebEditEditFieldContactUsSubject;
	private SENDContactUsWebElement SENDContactUsWebElement;
	private GOUPImage GOUPImage;
	private SIGNINWebElement SIGNINWebElement;
	private BoseSoundlinkImage BoseSoundlinkImage;
	private ADDTOCARTButton ADDTOCARTButton;
	private CHECKOUTHoverButton CHECKOUTHoverButton;
	private HEADPHONESShopNowWebElement1 HEADPHONESShopNowWebElement1;
	private LinkCartIcon LinkCartIcon;
	private SelectProductsContactUsListBox SelectProductsContactUsListBox;
	private UsernameLoginEditField UsernameLoginEditField;
	private PasswordLoginEditField PasswordLoginEditField;
	private NEXTButton NEXTButton;
	private SafepayImage SafepayImage;
	private SafePayUsernameEditField SafePayUsernameEditField;
	private SafePayPasswordEditField SafePayPasswordEditField;
	private PAYNOWWebElement PAYNOWWebElement;
	private SignOutWebElement SignOutWebElement;
	private AdvantageDEMOHomeLink AdvantageDEMOHomeLink;
	private EmailContactUsWebElement EmailContactUsWebElement;
	private SpecialOfferImageItem1 SpecialOfferImageItem1;
	private SpecialOfferViewDetailsItem1Link SpecialOfferViewDetailsItem1Link;
	private CREATENEWACCOUNTWebElement CREATENEWACCOUNTWebElement;
	private CreateAccountUsernameWebEdit CreateAccountUsernameWebEdit;
	private CreateAccountPasswordEditField CreateAccountPasswordEditField;
	private CreateAccountEmailEditField CreateAccountEmailEditField;
	private CreateAccountPasswordConfirmEditField CreateAccountPasswordConfirmEditField;
	private CreateAccountFirstNameEditField CreateAccountFirstNameEditField;
	private CreateAccountLastNameEditField CreateAccountLastNameEditField;
	private CreateAccountPhoneNumberEditField CreateAccountPhoneNumberEditField;
	private CreateAccountCountrySelectListBox CreateAccountCountrySelectListBox;
	private CreateAccountAddressEditField CreateAccountAddressEditField;
	private CreateAccountPostalCodeEditField CreateAccountPostalCodeEditField;
	private CreateAccountCityEditField CreateAccountCityEditField;
	private CreateAccountReceiveOffersCheckBox CreateAccountReceiveOffersCheckBox;
	private CreateAccountAgreeToTermsCheckBox CreateAccountAgreeToTermsCheckBox;
	private CreateAccountREGISTERValidWebElement CreateAccountREGISTERValidWebElement;
	private UserNameAlreadyExistsWebElement UserNameAlreadyExistsWebElement;
	private ChatLogoImage ChatLogoImage;
	private FacebookImage FacebookImage;
	private TwitterImage TwitterImage;
	private LinkedInImage LinkedInImage;
	private AdvantageIncCopyrightVersionWebElement AdvantageIncCopyrightVersionWebElement;
	private MyAccountWebElement MyAccountWebElement;
	private MyOrdersWebElement MyOrdersWebElement;
	private MyAccountHeaderLabelWebElement MyAccountHeaderLabelWebElement;
	private MyOrdersHeaderLabelWebElement MyOrdersHeaderLabelWebElement;
	private SearchPreviewTOPRESULTSFORWebElement SearchPreviewTOPRESULTSFORWebElement;
	private SearchEditField SearchEditField;
	private ThankYouForBuyingWithAdvantageWebElement ThankYouForBuyingWithAdvantageWebElement;
	private ThankYouForContactingAdvantageSupportWebElement ThankYouForContactingAdvantageSupportWebElement;
	private CloseSignInPopUpBtnWebElement CloseSignInPopUpBtnWebElement;
	private HPEliteTablet1011Image HPEliteTablet1011Image;
	private HPChromebookEnergyStarImage HPChromebookEnergyStarImage;
	private HPUsbOpticalMouseImage HPUsbOpticalMouseImage;
	private HPBeatsStudioHeadphonesImage HPBeatsStudioHeadphonesImage;
	private RememberMeCheckBox RememberMeCheckBox;
	private ColorSelectorFirstWebElement ColorSelectorFirstWebElement;
	private InvalidUserMessageWebElement InvalidUserMessageWebElement;
	private CreateAccountREGISTERNotValidWebElement CreateAccountREGISTERNotValidWebElement;
	private SaveChangesInProfileForFutureUse SaveChangesInProfileForFutureUse;
	private LaptopFilterSearchCheckbox LaptopFilterSearchCheckbox;
	private LAPTOPSWebElement LAPTOPSWebElement;
	private SpeakersFilterSearchCheckbox SpeakersFilterSearchCheckbox;
	private SPEAKERSWebElement SPEAKERSWebElement;
	private FirstItemInSearchFilterResultTableImage FirstItemInSearchFilterResultTableImage;
	private SearchResultTitleWebElement SearchResultTitleWebElement;
	private QuantityContainerLanelWebElement QuantityContainerLanelWebElement;
	private QuantityOfProductWebEdit QuantityOfProductWebEdit;
	private CartTable CartTable;
	private FirstRemoveItemFromCartLinkWebElement FirstRemoveItemFromCartLinkWebElement;
	private SHIPPINGCostWebElement SHIPPINGCostWebElement;
						public AdvantageShoppingPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SearchIconWebElement = new SearchIconWebElement(this, applicationModel);
		SpeakersImgWebElement = new SpeakersImgWebElement(this, applicationModel);
		TabletsImgWebElement = new TabletsImgWebElement(this, applicationModel);
		LAPTOPSShopNowWebElement = new LAPTOPSShopNowWebElement(this, applicationModel);
		MICEShopNowWebElement = new MICEShopNowWebElement(this, applicationModel);
		HEADPHONESShopNowWebElement = new HEADPHONESShopNowWebElement(this, applicationModel);
		OURPRODUCTSMainWebElement = new OURPRODUCTSMainWebElement(this, applicationModel);
		SPECIALOFFERMainWebElement = new SPECIALOFFERMainWebElement(this, applicationModel);
		POPULARITEMSMainWebElement = new POPULARITEMSMainWebElement(this, applicationModel);
		CONTACTUSMainWebElement = new CONTACTUSMainWebElement(this, applicationModel);
		SignOutMainIconWebElement = new SignOutMainIconWebElement(this, applicationModel);
		SEEOFFERButton = new SEEOFFERButton(this, applicationModel);
		EXPLORENOWButton = new EXPLORENOWButton(this, applicationModel);
		SelectProductLineContactUsListBox = new SelectProductLineContactUsListBox(this, applicationModel);
		WebEditEditFieldContactUsSubject = new WebEditEditFieldContactUsSubject(this, applicationModel);
		SENDContactUsWebElement = new SENDContactUsWebElement(this, applicationModel);
		GOUPImage = new GOUPImage(this, applicationModel);
		SIGNINWebElement = new SIGNINWebElement(this, applicationModel);
		BoseSoundlinkImage = new BoseSoundlinkImage(this, applicationModel);
		ADDTOCARTButton = new ADDTOCARTButton(this, applicationModel);
		CHECKOUTHoverButton = new CHECKOUTHoverButton(this, applicationModel);
		HEADPHONESShopNowWebElement1 = new HEADPHONESShopNowWebElement1(this, applicationModel);
		LinkCartIcon = new LinkCartIcon(this, applicationModel);
		SelectProductsContactUsListBox = new SelectProductsContactUsListBox(this, applicationModel);
		UsernameLoginEditField = new UsernameLoginEditField(this, applicationModel);
		PasswordLoginEditField = new PasswordLoginEditField(this, applicationModel);
		NEXTButton = new NEXTButton(this, applicationModel);
		SafepayImage = new SafepayImage(this, applicationModel);
		SafePayUsernameEditField = new SafePayUsernameEditField(this, applicationModel);
		SafePayPasswordEditField = new SafePayPasswordEditField(this, applicationModel);
		PAYNOWWebElement = new PAYNOWWebElement(this, applicationModel);
		SignOutWebElement = new SignOutWebElement(this, applicationModel);
		AdvantageDEMOHomeLink = new AdvantageDEMOHomeLink(this, applicationModel);
		EmailContactUsWebElement = new EmailContactUsWebElement(this, applicationModel);
		SpecialOfferImageItem1 = new SpecialOfferImageItem1(this, applicationModel);
		SpecialOfferViewDetailsItem1Link = new SpecialOfferViewDetailsItem1Link(this, applicationModel);
		CREATENEWACCOUNTWebElement = new CREATENEWACCOUNTWebElement(this, applicationModel);
		CreateAccountUsernameWebEdit = new CreateAccountUsernameWebEdit(this, applicationModel);
		CreateAccountPasswordEditField = new CreateAccountPasswordEditField(this, applicationModel);
		CreateAccountEmailEditField = new CreateAccountEmailEditField(this, applicationModel);
		CreateAccountPasswordConfirmEditField = new CreateAccountPasswordConfirmEditField(this, applicationModel);
		CreateAccountFirstNameEditField = new CreateAccountFirstNameEditField(this, applicationModel);
		CreateAccountLastNameEditField = new CreateAccountLastNameEditField(this, applicationModel);
		CreateAccountPhoneNumberEditField = new CreateAccountPhoneNumberEditField(this, applicationModel);
		CreateAccountCountrySelectListBox = new CreateAccountCountrySelectListBox(this, applicationModel);
		CreateAccountAddressEditField = new CreateAccountAddressEditField(this, applicationModel);
		CreateAccountPostalCodeEditField = new CreateAccountPostalCodeEditField(this, applicationModel);
		CreateAccountCityEditField = new CreateAccountCityEditField(this, applicationModel);
		CreateAccountReceiveOffersCheckBox = new CreateAccountReceiveOffersCheckBox(this, applicationModel);
		CreateAccountAgreeToTermsCheckBox = new CreateAccountAgreeToTermsCheckBox(this, applicationModel);
		CreateAccountREGISTERValidWebElement = new CreateAccountREGISTERValidWebElement(this, applicationModel);
		UserNameAlreadyExistsWebElement = new UserNameAlreadyExistsWebElement(this, applicationModel);
		ChatLogoImage = new ChatLogoImage(this, applicationModel);
		FacebookImage = new FacebookImage(this, applicationModel);
		TwitterImage = new TwitterImage(this, applicationModel);
		LinkedInImage = new LinkedInImage(this, applicationModel);
		AdvantageIncCopyrightVersionWebElement = new AdvantageIncCopyrightVersionWebElement(this, applicationModel);
		MyAccountWebElement = new MyAccountWebElement(this, applicationModel);
		MyOrdersWebElement = new MyOrdersWebElement(this, applicationModel);
		MyAccountHeaderLabelWebElement = new MyAccountHeaderLabelWebElement(this, applicationModel);
		MyOrdersHeaderLabelWebElement = new MyOrdersHeaderLabelWebElement(this, applicationModel);
		SearchPreviewTOPRESULTSFORWebElement = new SearchPreviewTOPRESULTSFORWebElement(this, applicationModel);
		SearchEditField = new SearchEditField(this, applicationModel);
		ThankYouForBuyingWithAdvantageWebElement = new ThankYouForBuyingWithAdvantageWebElement(this, applicationModel);
		ThankYouForContactingAdvantageSupportWebElement = new ThankYouForContactingAdvantageSupportWebElement(this, applicationModel);
		CloseSignInPopUpBtnWebElement = new CloseSignInPopUpBtnWebElement(this, applicationModel);
		HPEliteTablet1011Image = new HPEliteTablet1011Image(this, applicationModel);
		HPChromebookEnergyStarImage = new HPChromebookEnergyStarImage(this, applicationModel);
		HPUsbOpticalMouseImage = new HPUsbOpticalMouseImage(this, applicationModel);
		HPBeatsStudioHeadphonesImage = new HPBeatsStudioHeadphonesImage(this, applicationModel);
		RememberMeCheckBox = new RememberMeCheckBox(this, applicationModel);
		ColorSelectorFirstWebElement = new ColorSelectorFirstWebElement(this, applicationModel);
		InvalidUserMessageWebElement = new InvalidUserMessageWebElement(this, applicationModel);
		CreateAccountREGISTERNotValidWebElement = new CreateAccountREGISTERNotValidWebElement(this, applicationModel);
		SaveChangesInProfileForFutureUse = new SaveChangesInProfileForFutureUse(this, applicationModel);
		LaptopFilterSearchCheckbox = new LaptopFilterSearchCheckbox(this, applicationModel);
		LAPTOPSWebElement = new LAPTOPSWebElement(this, applicationModel);
		SpeakersFilterSearchCheckbox = new SpeakersFilterSearchCheckbox(this, applicationModel);
		SPEAKERSWebElement = new SPEAKERSWebElement(this, applicationModel);
		FirstItemInSearchFilterResultTableImage = new FirstItemInSearchFilterResultTableImage(this, applicationModel);
		SearchResultTitleWebElement = new SearchResultTitleWebElement(this, applicationModel);
		QuantityContainerLanelWebElement = new QuantityContainerLanelWebElement(this, applicationModel);
		QuantityOfProductWebEdit = new QuantityOfProductWebEdit(this, applicationModel);
		CartTable = new CartTable(this, applicationModel);
		FirstRemoveItemFromCartLinkWebElement = new FirstRemoveItemFromCartLinkWebElement(this, applicationModel);
		SHIPPINGCostWebElement = new SHIPPINGCostWebElement(this, applicationModel);

			setDisplayName(" Advantage Shopping");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SearchIconWebElement SearchIconWebElement() { return SearchIconWebElement; }
		public SpeakersImgWebElement SpeakersImgWebElement() { return SpeakersImgWebElement; }
		public TabletsImgWebElement TabletsImgWebElement() { return TabletsImgWebElement; }
		public LAPTOPSShopNowWebElement LAPTOPSShopNowWebElement() { return LAPTOPSShopNowWebElement; }
		public MICEShopNowWebElement MICEShopNowWebElement() { return MICEShopNowWebElement; }
		public HEADPHONESShopNowWebElement HEADPHONESShopNowWebElement() { return HEADPHONESShopNowWebElement; }
		public OURPRODUCTSMainWebElement OURPRODUCTSMainWebElement() { return OURPRODUCTSMainWebElement; }
		public SPECIALOFFERMainWebElement SPECIALOFFERMainWebElement() { return SPECIALOFFERMainWebElement; }
		public POPULARITEMSMainWebElement POPULARITEMSMainWebElement() { return POPULARITEMSMainWebElement; }
		public CONTACTUSMainWebElement CONTACTUSMainWebElement() { return CONTACTUSMainWebElement; }
		public SignOutMainIconWebElement SignOutMainIconWebElement() { return SignOutMainIconWebElement; }
		public SEEOFFERButton SEEOFFERButton() { return SEEOFFERButton; }
		public EXPLORENOWButton EXPLORENOWButton() { return EXPLORENOWButton; }
		public SelectProductLineContactUsListBox SelectProductLineContactUsListBox() { return SelectProductLineContactUsListBox; }
		public WebEditEditFieldContactUsSubject WebEditEditFieldContactUsSubject() { return WebEditEditFieldContactUsSubject; }
		public SENDContactUsWebElement SENDContactUsWebElement() { return SENDContactUsWebElement; }
		public GOUPImage GOUPImage() { return GOUPImage; }
		public SIGNINWebElement SIGNINWebElement() { return SIGNINWebElement; }
		public BoseSoundlinkImage BoseSoundlinkImage() { return BoseSoundlinkImage; }
		public ADDTOCARTButton ADDTOCARTButton() { return ADDTOCARTButton; }
		public CHECKOUTHoverButton CHECKOUTHoverButton() { return CHECKOUTHoverButton; }
		public HEADPHONESShopNowWebElement1 HEADPHONESShopNowWebElement1() { return HEADPHONESShopNowWebElement1; }
		public LinkCartIcon LinkCartIcon() { return LinkCartIcon; }
		public SelectProductsContactUsListBox SelectProductsContactUsListBox() { return SelectProductsContactUsListBox; }
		public UsernameLoginEditField UsernameLoginEditField() { return UsernameLoginEditField; }
		public PasswordLoginEditField PasswordLoginEditField() { return PasswordLoginEditField; }
		public NEXTButton NEXTButton() { return NEXTButton; }
		public SafepayImage SafepayImage() { return SafepayImage; }
		public SafePayUsernameEditField SafePayUsernameEditField() { return SafePayUsernameEditField; }
		public SafePayPasswordEditField SafePayPasswordEditField() { return SafePayPasswordEditField; }
		public PAYNOWWebElement PAYNOWWebElement() { return PAYNOWWebElement; }
		public SignOutWebElement SignOutWebElement() { return SignOutWebElement; }
		public AdvantageDEMOHomeLink AdvantageDEMOHomeLink() { return AdvantageDEMOHomeLink; }
		public EmailContactUsWebElement EmailContactUsWebElement() { return EmailContactUsWebElement; }
		public SpecialOfferImageItem1 SpecialOfferImageItem1() { return SpecialOfferImageItem1; }
		public SpecialOfferViewDetailsItem1Link SpecialOfferViewDetailsItem1Link() { return SpecialOfferViewDetailsItem1Link; }
		public CREATENEWACCOUNTWebElement CREATENEWACCOUNTWebElement() { return CREATENEWACCOUNTWebElement; }
		public CreateAccountUsernameWebEdit CreateAccountUsernameWebEdit() { return CreateAccountUsernameWebEdit; }
		public CreateAccountPasswordEditField CreateAccountPasswordEditField() { return CreateAccountPasswordEditField; }
		public CreateAccountEmailEditField CreateAccountEmailEditField() { return CreateAccountEmailEditField; }
		public CreateAccountPasswordConfirmEditField CreateAccountPasswordConfirmEditField() { return CreateAccountPasswordConfirmEditField; }
		public CreateAccountFirstNameEditField CreateAccountFirstNameEditField() { return CreateAccountFirstNameEditField; }
		public CreateAccountLastNameEditField CreateAccountLastNameEditField() { return CreateAccountLastNameEditField; }
		public CreateAccountPhoneNumberEditField CreateAccountPhoneNumberEditField() { return CreateAccountPhoneNumberEditField; }
		public CreateAccountCountrySelectListBox CreateAccountCountrySelectListBox() { return CreateAccountCountrySelectListBox; }
		public CreateAccountAddressEditField CreateAccountAddressEditField() { return CreateAccountAddressEditField; }
		public CreateAccountPostalCodeEditField CreateAccountPostalCodeEditField() { return CreateAccountPostalCodeEditField; }
		public CreateAccountCityEditField CreateAccountCityEditField() { return CreateAccountCityEditField; }
		public CreateAccountReceiveOffersCheckBox CreateAccountReceiveOffersCheckBox() { return CreateAccountReceiveOffersCheckBox; }
		public CreateAccountAgreeToTermsCheckBox CreateAccountAgreeToTermsCheckBox() { return CreateAccountAgreeToTermsCheckBox; }
		public CreateAccountREGISTERValidWebElement CreateAccountREGISTERValidWebElement() { return CreateAccountREGISTERValidWebElement; }
		public UserNameAlreadyExistsWebElement UserNameAlreadyExistsWebElement() { return UserNameAlreadyExistsWebElement; }
		public ChatLogoImage ChatLogoImage() { return ChatLogoImage; }
		public FacebookImage FacebookImage() { return FacebookImage; }
		public TwitterImage TwitterImage() { return TwitterImage; }
		public LinkedInImage LinkedInImage() { return LinkedInImage; }
		public AdvantageIncCopyrightVersionWebElement AdvantageIncCopyrightVersionWebElement() { return AdvantageIncCopyrightVersionWebElement; }
		public MyAccountWebElement MyAccountWebElement() { return MyAccountWebElement; }
		public MyOrdersWebElement MyOrdersWebElement() { return MyOrdersWebElement; }
		public MyAccountHeaderLabelWebElement MyAccountHeaderLabelWebElement() { return MyAccountHeaderLabelWebElement; }
		public MyOrdersHeaderLabelWebElement MyOrdersHeaderLabelWebElement() { return MyOrdersHeaderLabelWebElement; }
		public SearchPreviewTOPRESULTSFORWebElement SearchPreviewTOPRESULTSFORWebElement() { return SearchPreviewTOPRESULTSFORWebElement; }
		public SearchEditField SearchEditField() { return SearchEditField; }
		public ThankYouForBuyingWithAdvantageWebElement ThankYouForBuyingWithAdvantageWebElement() { return ThankYouForBuyingWithAdvantageWebElement; }
		public ThankYouForContactingAdvantageSupportWebElement ThankYouForContactingAdvantageSupportWebElement() { return ThankYouForContactingAdvantageSupportWebElement; }
		public CloseSignInPopUpBtnWebElement CloseSignInPopUpBtnWebElement() { return CloseSignInPopUpBtnWebElement; }
		public HPEliteTablet1011Image HPEliteTablet1011Image() { return HPEliteTablet1011Image; }
		public HPChromebookEnergyStarImage HPChromebookEnergyStarImage() { return HPChromebookEnergyStarImage; }
		public HPUsbOpticalMouseImage HPUsbOpticalMouseImage() { return HPUsbOpticalMouseImage; }
		public HPBeatsStudioHeadphonesImage HPBeatsStudioHeadphonesImage() { return HPBeatsStudioHeadphonesImage; }
		public RememberMeCheckBox RememberMeCheckBox() { return RememberMeCheckBox; }
		public ColorSelectorFirstWebElement ColorSelectorFirstWebElement() { return ColorSelectorFirstWebElement; }
		public InvalidUserMessageWebElement InvalidUserMessageWebElement() { return InvalidUserMessageWebElement; }
		public CreateAccountREGISTERNotValidWebElement CreateAccountREGISTERNotValidWebElement() { return CreateAccountREGISTERNotValidWebElement; }
		public SaveChangesInProfileForFutureUse SaveChangesInProfileForFutureUse() { return SaveChangesInProfileForFutureUse; }
		public LaptopFilterSearchCheckbox LaptopFilterSearchCheckbox() { return LaptopFilterSearchCheckbox; }
		public LAPTOPSWebElement LAPTOPSWebElement() { return LAPTOPSWebElement; }
		public SpeakersFilterSearchCheckbox SpeakersFilterSearchCheckbox() { return SpeakersFilterSearchCheckbox; }
		public SPEAKERSWebElement SPEAKERSWebElement() { return SPEAKERSWebElement; }
		public FirstItemInSearchFilterResultTableImage FirstItemInSearchFilterResultTableImage() { return FirstItemInSearchFilterResultTableImage; }
		public SearchResultTitleWebElement SearchResultTitleWebElement() { return SearchResultTitleWebElement; }
		public QuantityContainerLanelWebElement QuantityContainerLanelWebElement() { return QuantityContainerLanelWebElement; }
		public QuantityOfProductWebEdit QuantityOfProductWebEdit() { return QuantityOfProductWebEdit; }
		public CartTable CartTable() { return CartTable; }
		public FirstRemoveItemFromCartLinkWebElement FirstRemoveItemFromCartLinkWebElement() { return FirstRemoveItemFromCartLinkWebElement; }
		public SHIPPINGCostWebElement SHIPPINGCostWebElement() { return SHIPPINGCostWebElement; }
		
			public class SearchIconWebElement extends WebElementNodeBase
	{

		
								public SearchIconWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search Icon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("div").id("search").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SpeakersImgWebElement extends WebElementNodeBase
	{

		
								public SpeakersImgWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SpeakersImg");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("SpeaakersImg categoryCell").tagName("DIV").innerText("SPEAKERS Shop Now ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TabletsImgWebElement extends WebElementNodeBase
	{

		
								public TabletsImgWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TabletsImg");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("categoryCell").tagName("DIV").innerText("TABLETS Shop Now ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LAPTOPSShopNowWebElement extends WebElementNodeBase
	{

		
								public LAPTOPSShopNowWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LAPTOPS Shop Now ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("laptopImg categoryCell").tagName("DIV").innerText("LAPTOPS Shop Now ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MICEShopNowWebElement extends WebElementNodeBase
	{

		
								public MICEShopNowWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MICE Shop Now ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("micesImg categoryCell").tagName("DIV").innerText("MICE Shop Now ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HEADPHONESShopNowWebElement extends WebElementNodeBase
	{

		
								public HEADPHONESShopNowWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HEADPHONES Shop Now ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("twoRows categoryCell").tagName("DIV").innerText("HEADPHONES Shop Now ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OURPRODUCTSMainWebElement extends WebElementNodeBase
	{

		
								public OURPRODUCTSMainWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OUR PRODUCTS");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("OUR PRODUCTS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SPECIALOFFERMainWebElement extends WebElementNodeBase
	{

		
								public SPECIALOFFERMainWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SPECIAL OFFER");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("SPECIAL OFFER").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class POPULARITEMSMainWebElement extends WebElementNodeBase
	{

		
								public POPULARITEMSMainWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("POPULAR ITEMS");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("POPULAR ITEMS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CONTACTUSMainWebElement extends WebElementNodeBase
	{

		
								public CONTACTUSMainWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CONTACT US");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("CONTACT US").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SignOutMainIconWebElement extends WebElementNodeBase
	{

		
								public SignOutMainIconWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SingInOutIcon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText(new RegExpProperty("(.*)My account My Orders Sign out ")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SEEOFFERButton extends ButtonNodeBase
	{

		
								public SEEOFFERButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SEE OFFER");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").tagName("BUTTON").name("SEE OFFER").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EXPLORENOWButton extends ButtonNodeBase
	{

		
								public EXPLORENOWButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EXPLORE NOW");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").role("").accessibilityName("").tagName("BUTTON").name("EXPLORE NOW").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectProductLineContactUsListBox extends ListBoxNodeBase
	{

		
								public SelectProductLineContactUsListBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectProductLine");
		}

		@Override
		protected com.hp.lft.sdk.web.ListBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ListBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ListBoxDescription.Builder().role("").accessibilityName("").tagName("SELECT").name("select").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WebEditEditFieldContactUsSubject extends EditFieldNodeBase
	{

		
								public WebEditEditFieldContactUsSubject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Contact Us Subject");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("textarea").tagName("TEXTAREA").name("WebEdit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class SENDContactUsWebElement extends WebElementNodeBase
	{

		
								public SENDContactUsWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SENDContactUs");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("SEND").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GOUPImage extends ImageNodeBase
	{

		
								public GOUPImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("GO UP");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("GO UP").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SIGNINWebElement extends WebElementNodeBase
	{

		
								public SIGNINWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SIGN IN");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("SIGN IN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BoseSoundlinkImage extends ImageNodeBase
	{

		
								public BoseSoundlinkImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BoseSoundlinkImage");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ADDTOCARTButton extends ButtonNodeBase
	{

		
								public ADDTOCARTButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("                            ADD TO CART                        ");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").tagName("BUTTON").name("                            ADD TO CART                        ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CHECKOUTHoverButton extends ButtonNodeBase
	{

		
								public CHECKOUTHoverButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CHECKOUTHover");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").role("").accessibilityName("").tagName("BUTTON").name(new RegExpProperty("CHECKOUT\\s+\\(.+\\)")).index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HEADPHONESShopNowWebElement1 extends WebElementNodeBase
	{

		
								public HEADPHONESShopNowWebElement1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HEADPHONES Shop Now 1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("twoRows categoryCell").tagName("DIV").innerText("HEADPHONES Shop Now ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LinkCartIcon extends LinkNodeBase
	{

		
								public LinkCartIcon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cart Icon");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().tagName("A").innerText(new RegExpProperty("([0-9]+)\\s*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectProductsContactUsListBox extends ListBoxNodeBase
	{

		
								public SelectProductsContactUsListBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectProduct");
		}

		@Override
		protected com.hp.lft.sdk.web.ListBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ListBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ListBoxDescription.Builder().role("").accessibilityName("").tagName("SELECT").name("select").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UsernameLoginEditField extends EditFieldNodeBase
	{

		
								public UsernameLoginEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Username");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class PasswordLoginEditField extends EditFieldNodeBase
	{

		
								public PasswordLoginEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Password");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("password").tagName("INPUT").name("WebEdit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class NEXTButton extends ButtonNodeBase
	{

		
								public NEXTButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NEXT");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").tagName("BUTTON").name("NEXT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SafepayImage extends ImageNodeBase
	{

		
								public SafepayImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Safepay");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("Safepay").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SafePayUsernameEditField extends EditFieldNodeBase
	{

		
								public SafePayUsernameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SafePayUsername");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class SafePayPasswordEditField extends EditFieldNodeBase
	{

		
								public SafePayPasswordEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SafePayPassword");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("password").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class PAYNOWWebElement extends WebElementNodeBase
	{

		
								public PAYNOWWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PAY NOW");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("sec-sender-a ng-scope").tagName("A").innerText("PAY NOW").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SignOutWebElement extends WebElementNodeBase
	{

		
								public SignOutWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Sign out");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("option roboto-medium ng-scope").tagName("LABEL").innerText("Sign out").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AdvantageDEMOHomeLink extends LinkNodeBase
	{

		
								public AdvantageDEMOHomeLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Advantage DEMO");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().tagName("A").innerText("dvantage DEMO ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EmailContactUsWebElement extends EditFieldNodeBase
	{

		
								public EmailContactUsWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EmailEdit");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class SpecialOfferImageItem1 extends ImageNodeBase
	{

		
								public SpecialOfferImageItem1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Special-offerImageItem1");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("Special-offer").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SpecialOfferViewDetailsItem1Link extends WebElementNodeBase
	{

		
								public SpecialOfferViewDetailsItem1Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("View Details Item 1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("shop_nowSub viewDetail ng-scope").tagName("LABEL").innerText("View Details").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CREATENEWACCOUNTWebElement extends WebElementNodeBase
	{

		
								public CREATENEWACCOUNTWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CREATE NEW ACCOUNT");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LABEL").innerText("CREATE NEW ACCOUNT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountUsernameWebEdit extends EditFieldNodeBase
	{

		
								public CreateAccountUsernameWebEdit(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Username");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class CreateAccountPasswordEditField extends EditFieldNodeBase
	{

		
								public CreateAccountPasswordEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Password");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("password").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class CreateAccountEmailEditField extends EditFieldNodeBase
	{

		
								public CreateAccountEmailEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Email");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class CreateAccountPasswordConfirmEditField extends EditFieldNodeBase
	{

		
								public CreateAccountPasswordConfirmEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Password Confirm");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("password").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class CreateAccountFirstNameEditField extends EditFieldNodeBase
	{

		
								public CreateAccountFirstNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account First Name");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class CreateAccountLastNameEditField extends EditFieldNodeBase
	{

		
								public CreateAccountLastNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Last Name");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class CreateAccountPhoneNumberEditField extends EditFieldNodeBase
	{

		
								public CreateAccountPhoneNumberEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Phone Number");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class CreateAccountCountrySelectListBox extends ListBoxNodeBase
	{

		
								public CreateAccountCountrySelectListBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Country Select");
		}

		@Override
		protected com.hp.lft.sdk.web.ListBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ListBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ListBoxDescription.Builder().role("").accessibilityName("").tagName("SELECT").name("select").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountAddressEditField extends EditFieldNodeBase
	{

		
								public CreateAccountAddressEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Address");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(8).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class CreateAccountPostalCodeEditField extends EditFieldNodeBase
	{

		
								public CreateAccountPostalCodeEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Postal Code");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class CreateAccountCityEditField extends EditFieldNodeBase
	{

		
								public CreateAccountCityEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account City");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").index(7).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class CreateAccountReceiveOffersCheckBox extends CheckBoxNodeBase
	{

		
								public CreateAccountReceiveOffersCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Receive Offers");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").role("").accessibilityName("").tagName("INPUT").name("").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountAgreeToTermsCheckBox extends CheckBoxNodeBase
	{

		
								public CreateAccountAgreeToTermsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create Account Agree To Terms");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").role("").accessibilityName("").tagName("INPUT").name("").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountREGISTERValidWebElement extends WebElementNodeBase
	{

		
								public CreateAccountREGISTERValidWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("REGISTER");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("REGISTER").className("sec-sender-a ng-scope").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserNameAlreadyExistsWebElement extends WebElementNodeBase
	{

		
								public UserNameAlreadyExistsWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("User name already exists ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LABEL").innerText("User name already exists ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ChatLogoImage extends ImageNodeBase
	{

		
								public ChatLogoImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("chat logo");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("chat logo").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FacebookImage extends ImageNodeBase
	{

		
								public FacebookImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Facebook Icon");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("icon").type(com.hp.lft.sdk.web.ImageType.LINK).tagName("IMG").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TwitterImage extends ImageNodeBase
	{

		
								public TwitterImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Twitter Icon");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("icon").type(com.hp.lft.sdk.web.ImageType.LINK).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LinkedInImage extends ImageNodeBase
	{

		
								public LinkedInImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LinkedIn Icon");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("icon").type(com.hp.lft.sdk.web.ImageType.LINK).tagName("IMG").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AdvantageIncCopyrightVersionWebElement extends WebElementNodeBase
	{

		
								public AdvantageIncCopyrightVersionWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Advantage Copyright");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LABEL").innerText(new RegExpProperty("© Advantage Inc.+Release (.+)")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MyAccountWebElement extends WebElementNodeBase
	{

		
								public MyAccountWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("My account");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("option roboto-medium ng-scope").tagName("LABEL").innerText("My account").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MyOrdersWebElement extends WebElementNodeBase
	{

		
								public MyOrdersWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("My Orders");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("option ng-scope").tagName("LABEL").innerText("My Orders").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MyAccountHeaderLabelWebElement extends WebElementNodeBase
	{

		
								public MyAccountHeaderLabelWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MY ACCOUNT Header Label");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("H3").innerText("MY ACCOUNT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MyOrdersHeaderLabelWebElement extends WebElementNodeBase
	{

		
								public MyOrdersHeaderLabelWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MY ORDERS Header Label");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("H3").innerText("MY ORDERS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchPreviewTOPRESULTSFORWebElement extends WebElementNodeBase
	{

		
								public SearchPreviewTOPRESULTSFORWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TOP RESULTS FOR preview search");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").innerText(new RegExpProperty("TOP RESULTS FOR:.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchEditField extends EditFieldNodeBase
	{

		
								public SearchEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search Edit Box");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("Search AdvantageOnlineShopping.com").tagName("INPUT").name("WebEdit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class ThankYouForBuyingWithAdvantageWebElement extends WebElementNodeBase
	{

		
								public ThankYouForBuyingWithAdvantageWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Thank you for buying with Advantage ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("H2").innerText("Thank you for buying with Advantage ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ThankYouForContactingAdvantageSupportWebElement extends WebElementNodeBase
	{

		
								public ThankYouForContactingAdvantageSupportWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Thank you for contacting Advantage support.");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("P").innerText("Thank you for contacting Advantage support.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CloseSignInPopUpBtnWebElement extends WebElementNodeBase
	{

		
								public CloseSignInPopUpBtnWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Close SignIn Pop Up Button");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("closePopUpBtn").tagName("DIV").innerText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HPEliteTablet1011Image extends ImageNodeBase
	{

		
								public HPEliteTablet1011Image(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HP Elite Tablet 1011");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HPChromebookEnergyStarImage extends ImageNodeBase
	{

		
								public HPChromebookEnergyStarImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HP Chromebook Energy Star");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HPUsbOpticalMouseImage extends ImageNodeBase
	{

		
								public HPUsbOpticalMouseImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HP USB 3 BUTTON OPTICAL MOUSE");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HPBeatsStudioHeadphonesImage extends ImageNodeBase
	{

		
								public HPBeatsStudioHeadphonesImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BEATS STUDIO 2 HEADPHONES");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RememberMeCheckBox extends CheckBoxNodeBase
	{

		
								public RememberMeCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Remember Me CheckBox");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").tagName("INPUT").name("").attribute("ng-model", "mainCtrl.rememberMe").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ColorSelectorFirstWebElement extends WebElementNodeBase
	{

		
								public ColorSelectorFirstWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Color Selector First");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("productColor ng-scope").tagName("SPAN").innerText("").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InvalidUserMessageWebElement extends WebElementNodeBase
	{

		
								public InvalidUserMessageWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Invalid User Message");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("or  center invalid").tagName("LABEL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAccountREGISTERNotValidWebElement extends WebElementNodeBase
	{

		
								public CreateAccountREGISTERNotValidWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("REGISTER Not Valid");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("REGISTER").className("sec-sender-a ng-scope").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveChangesInProfileForFutureUse extends CheckBoxNodeBase
	{

		
								public SaveChangesInProfileForFutureUse(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save Changes In Profile");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").role("").accessibilityName("").tagName("INPUT").name("").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LaptopFilterSearchCheckbox extends CheckBoxNodeBase
	{

		
								public LaptopFilterSearchCheckbox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Laptop Filter Search Checkbox");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").role("").accessibilityName("").tagName("INPUT").name("").vri(new VisualRelation().setTestObject(getRelatedObject("AdvantageShoppingPage.LAPTOPSWebElement")).setProximityRelation(com.hp.lft.sdk.ProximityVisualRelation.CONTAINS))
.build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LAPTOPSWebElement extends WebElementNodeBase
	{

		
								public LAPTOPSWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LAPTOPS");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("LAPTOPS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SpeakersFilterSearchCheckbox extends CheckBoxNodeBase
	{

		
								public SpeakersFilterSearchCheckbox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Speakers Filter Search Checkbox");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().type("checkbox").role("").accessibilityName("").tagName("INPUT").name("").vri(new VisualRelation().setTestObject(getRelatedObject("AdvantageShoppingPage.SPEAKERSWebElement")).setProximityRelation(com.hp.lft.sdk.ProximityVisualRelation.CONTAINS))
.build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SPEAKERSWebElement extends WebElementNodeBase
	{

		
								public SPEAKERSWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SPEAKERS");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("SPEAKERS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FirstItemInSearchFilterResultTableImage extends ImageNodeBase
	{

		
								public FirstItemInSearchFilterResultTableImage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("First Item In Search Filter Result Table");
		}

		@Override
		protected com.hp.lft.sdk.web.ImageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ImageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ImageDescription.Builder().alt("").type(com.hp.lft.sdk.web.ImageType.NORMAL).tagName("IMG").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchResultTitleWebElement extends WebElementNodeBase
	{

		
								public SearchResultTitleWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search Result Title");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("H3").innerText(new RegExpProperty("Search result:\\s*(.*)")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class QuantityContainerLanelWebElement extends WebElementNodeBase
	{

		
								public QuantityContainerLanelWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Quantity Container Label");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").innerText("Quantity: ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class QuantityOfProductWebEdit extends EditFieldNodeBase
	{

		
								public QuantityOfProductWebEdit(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Quantity Of Product");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("").accessibilityName("").tagName("INPUT").name("WebEdit").vri(new VisualRelation().setTestObject(getRelatedObject("AdvantageShoppingPage.QuantityContainerLanelWebElement")).setProximityRelation(com.hp.lft.sdk.ProximityVisualRelation.CONTAINS))
.build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class CartTable extends TableNodeBase
	{

		
								public CartTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cart Table");
		}

		@Override
		protected com.hp.lft.sdk.web.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.TableDescription.Builder().role("").accessibilityName("").tagName("TABLE").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FirstRemoveItemFromCartLinkWebElement extends WebElementNodeBase
	{

		
								public FirstRemoveItemFromCartLinkWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("First Remove Item From Cart Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("remove red ng-scope").tagName("A").innerText("REMOVE").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SHIPPINGCostWebElement extends WebElementNodeBase
	{

		
								public SHIPPINGCostWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SHIPPING Cost");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("shippingText roboto-regular ng-binding").tagName("LABEL").innerText(new RegExpProperty("SHIPPING \\$([0-9\\.]+)\\s*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class AdvantageOnlineShoppingDemoSupportChatPage extends PageNodeBase
	{

		
			private TypeAMessageEditField TypeAMessageEditField;
	private ServerConnectWebElement ServerConnectWebElement;
						public AdvantageOnlineShoppingDemoSupportChatPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					TypeAMessageEditField = new TypeAMessageEditField(this, applicationModel);
		ServerConnectWebElement = new ServerConnectWebElement(this, applicationModel);

			setDisplayName("Advantage Online Shopping Demo Support Chat");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public TypeAMessageEditField TypeAMessageEditField() { return TypeAMessageEditField; }
		public ServerConnectWebElement ServerConnectWebElement() { return ServerConnectWebElement; }
		
			public class TypeAMessageEditField extends EditFieldNodeBase
	{

		
								public TypeAMessageEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Type a message...");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").tagName("INPUT").name("WebEdit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		@Override
		public void submit() throws GeneralLeanFtException {
			// TODO Auto-generated method stub
			
		}

				
			}

	public class ServerConnectWebElement extends WebElementNodeBase
	{

		
								public ServerConnectWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Server connect. ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").innerText("Server connect. ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}


			
	public abstract class PageNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Page, com.hp.lft.sdk.web.PageDescription> implements com.hp.lft.sdk.web.Page
	{		
		public PageNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getURL() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getURL();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public java.lang.String runJavaScript(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0);
		}

		@Override 
		public <TResult> TResult runJavaScript(java.lang.String arg0, java.lang.Class<TResult> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void sync() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sync();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class WebElementNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.WebElement, com.hp.lft.sdk.web.WebElementDescription> implements com.hp.lft.sdk.web.WebElement
	{		
		public WebElementNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class ButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Button, com.hp.lft.sdk.web.ButtonDescription> implements com.hp.lft.sdk.web.Button
	{		
		public ButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getButtonType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButtonType();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class ListBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.ListBox, com.hp.lft.sdk.web.ListBoxDescription> implements com.hp.lft.sdk.web.ListBox
	{		
		public ListBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.web.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDefaultValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getDefaultValue();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public com.hp.lft.sdk.web.ListItem getItem(java.lang.String arg0)  
		{
			return getConcrete().getItem(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.web.ListItem> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.web.ListItem> getSelectedItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItems();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getValue();
		}

		@Override 
		public int getVisibleItemsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleItemsCount();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isMultiple() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMultiple();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.web.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class EditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.EditField, com.hp.lft.sdk.web.EditFieldDescription> implements com.hp.lft.sdk.web.EditField
	{		
		public EditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDefaultValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getDefaultValue();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMaxCharsInLine() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMaxCharsInLine();
		}

		@Override 
		public int getMaxLength() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMaxLength();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getPattern() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPattern();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public int getRowsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRowsCount();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getValue();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isReadOnly() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isReadOnly();
		}

		@Override 
		public boolean isRequired() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRequired();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setValue(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setValue(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class ImageNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Image, com.hp.lft.sdk.web.ImageDescription> implements com.hp.lft.sdk.web.Image
	{		
		public ImageNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAlt() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAlt();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getHref() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHref();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getSrc() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSrc();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getTarget() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTarget();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public com.hp.lft.sdk.web.ImageType getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class LinkNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Link, com.hp.lft.sdk.web.LinkDescription> implements com.hp.lft.sdk.web.Link
	{		
		public LinkNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColor();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFontName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFontName();
		}

		@Override 
		public java.lang.String getHref() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHref();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getTarget() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTarget();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class CheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.CheckBox, com.hp.lft.sdk.web.CheckBoxDescription> implements com.hp.lft.sdk.web.CheckBox
	{		
		public CheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void set(boolean arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
	
	public abstract class TableNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Table, com.hp.lft.sdk.web.TableDescription> implements com.hp.lft.sdk.web.Table
	{		
		public TableNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.web.TableRow findRowWithCellText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().findRowWithCellText(arg0);
		}

		@Override 
		public com.hp.lft.sdk.web.TableRow findRowWithCellText(java.lang.String arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().findRowWithCellText(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.web.TableRow findRowWithCellTextInColumn(java.lang.String arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().findRowWithCellTextInColumn(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.web.TableRow findRowWithCellTextInColumn(java.lang.String arg0, int arg1, int arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().findRowWithCellTextInColumn(arg0, arg1, arg2);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public int getBorder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBorder();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.util.List<java.lang.String> getColumnHeaders() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnHeaders();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.web.TableRow> getRows() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRows();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}
	}
}
